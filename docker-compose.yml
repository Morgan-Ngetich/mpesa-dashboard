services:
  backend:
    build: ./mpesa-dashboard-backend
    container_name: mpesa-dashboard-backend
    ports:
      - "8000:8000"
    volumes:
      - uploads:/shared/uploads
    environment:
      - ENV=production
      - KAFKA_BROKER=kafka:9092 
    depends_on:
      - db
      - kafka
    restart: always 
    networks:
      - app_network

  frontend:
    restart: always
    build: 
      context: ./mpesa-dashboard-frontend
      args:
        - VITE_API_URL=https://${DOMAIN:-localhost}
    container_name: mpesa-dashboard-frontend
    env_file:
      - .env
    ports:
      - "5173:5173"
    volumes:
      - uploads:/shared/uploads # ✅ Ignore node_modules properly
    depends_on:
      - backend
    networks:
      - app_network

  db:
    image: postgres:15
    container_name: mpesa-dashboard-db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: mpesa_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - ./mpesa-dashboard-frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./mpesa-dashboard-frontend/dist:/usr/share/nginx/html:ro  # ✅ Serve correct frontend build
    depends_on:
      - backend
    restart: always
    networks:
      - app_network

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: mpesa-dashboard-zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - app_network

  kafka:
    image: wurstmeister/kafka
    container_name: mpesa-dashboard-kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092  # ✅ Fixed hostname for Docker
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092  # ✅ Allow internal & external connections
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  uploads:  
